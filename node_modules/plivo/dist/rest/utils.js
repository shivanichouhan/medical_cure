'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

exports.camelCaseRequestWrapper = camelCaseRequestWrapper;
exports.validateSpeakAttributes = validateSpeakAttributes;

var _camelCase2 = require('lodash/camelCase');

var _camelCase3 = _interopRequireDefault(_camelCase2);

var _snakeCase2 = require('lodash/snakeCase');

var _snakeCase3 = _interopRequireDefault(_snakeCase2);

var _mapKeys2 = require('lodash/mapKeys');

var _mapKeys3 = _interopRequireDefault(_mapKeys2);

var _mapValues2 = require('lodash/mapValues');

var _mapValues3 = _interopRequireDefault(_mapValues2);

var _map2 = require('lodash/map');

var _map3 = _interopRequireDefault(_map2);

var _xml2js = require('xml2js');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function recursivelyRenameObject(object, renameFunc) {
  if (!(object instanceof Object)) {
    return object;
  }

  return (0, _mapValues3.default)((0, _mapKeys3.default)(object, renameFunc), function (value) {
    if (Array.isArray(value)) return (0, _map3.default)(value, function (value) {
      return recursivelyRenameObject(value, renameFunc);
    });
    if ((typeof value === 'undefined' ? 'undefined' : _typeof(value)) !== 'object') return value;
    return recursivelyRenameObject(value, renameFunc);
  });
}

function camelCaseRequestWrapper(requestFunc) {
  return function (method, action, params) {

    params = recursivelyRenameObject(params, function (value, key) {
      if (typeof key !== 'string') return key;

      // Snake Case logic has issue, it replaces double underscores with single
      // So dont run snake case logic for following params
      var skipParamsFromSnakeCasing = ['message_time__lt', 'message_time__lte', 'message_time__gt', 'message_time__gte', 'end_time__gt', 'end_time__gte', 'end_time__lt', 'end_time__lte', 'bill_duration__gt', 'bill_duration__gte', 'bill_duration__lt', 'bill_duration__lte', 'add_time__gt', 'add_time__gte', 'add_time__lt', 'add_time__lte'];
      if (skipParamsFromSnakeCasing.indexOf(key) >= 0) {
        return key;
      }

      return (0, _snakeCase3.default)(key).replace('_less_than', '__lt').replace('_greater_than', '__gt').replace('_greater_or_equal', '__gte').replace('_less_or_equal', '__lte').replace('_equal', '').replace('_equals', '');
    });

    return requestFunc(method, action, params).then(function (res) {
      res.body = recursivelyRenameObject(res.body, function (value, key) {
        if (typeof key !== 'string') return key;
        return (0, _camelCase3.default)(key);
      });

      return res;
    });
  };
}

function validateSpeakAttributes(content, voice) {

  if (!voice || ['MAN', 'WOMAN'].indexOf(voice) != -1) {
    return { success: true };
  }

  var voiceParts = voice.split('.');
  if (voiceParts.length != 2 || voiceParts[0] != 'Polly') {
    return {
      success: false, msg: "Invalid voice " + voice + '.'
    };
  };
  return {
    success: true
  };
}